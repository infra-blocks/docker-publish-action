name: Docker publish action
description: |
  Builds, tags and publishes your docker images.
inputs:
  service:
    description: The name of the service to build as found in the docker-compose file.
    required: true
  tags:
    description: A stringified JSON array of tags to apply on the built image. Defaults to '["latest"]'.
    required: false
    default: '["latest"]'
  build-arguments:
    description: |
      A stringified JSON object of build arguments to pass to the Docker compose build command.
      The keys should be the name of the build argument and the values should be the value to pass.
      Only objects of strings are supported.
    required: false
    default: '{}'
  docker-compose-file:
    description: The location of the docker-compose file. Defaults to "docker/docker-compose.yml".
    required: false
    default: "docker/docker-compose.yml"
  dry-run:
    description: When set to true, builds and tags, but doesn't push images.
    required: false
    default: 'false'
outputs:
  published:
    description: A stringified JSON array of images published. An image is of the form '<repo>:<tag>'
    value: ${{ steps.tag.outputs.published }}
runs:
  using: "composite"
  steps:
    - name: Parse metadata from ${{ inputs.docker-compose-file }}
      id: metadata
      shell: bash
      run: |
        if test "${ACTIONS_STEP_DEBUG}" = "true"; then
          set -x
        fi
        
        image="$(yq -e '.services["${{ inputs.service }}"].image' ${{ inputs.docker-compose-file }})"
        repo=$(echo "${image}" | cut -d ':' -f 1)
        default_tag=$(echo "${image}" | cut -d ':' -s -f 2)
        test -n "${default_tag}" || default_tag="latest"
        echo "image=${image}" >> "${GITHUB_OUTPUT}" 
        echo "repo=${repo}" >> "${GITHUB_OUTPUT}"
        echo "default-tag=${default_tag}" >> "${GITHUB_OUTPUT}"
    - name: Build ${{ inputs.service }}
      shell: bash
      env:
        BUILD_ARGS: ${{ inputs.build-arguments }}
      run: |
        if test "${ACTIONS_STEP_DEBUG}" = "true"; then
          set -x
        fi
        
        readarray -t build_args < <(echo "${BUILD_ARGS}" | jq -r '. | to_entries | .[] | [.key, .value] | "\(.[0])=\(.[1])"')
        
        if test -n "${build_args}"; then
          # Transform to CLI options.
          readarray -t build_args_opts < <(for arg in ${build_args[@]}; do echo "--build-arg $arg"; done)
          docker compose -f ${{ inputs.docker-compose-file }} build ${build_args_opts[@]} ${{ inputs.service }}
        else
          docker compose -f ${{ inputs.docker-compose-file }} build ${{ inputs.service }}
        fi
    - name: Tag ${{ inputs.service }}
      id: tag
      uses: infrastructure-blocks/docker-tag-action@v1
      with:
        image: ${{ steps.metadata.outputs.image }}
        tags: ${{ inputs.tags }}
        dry-run: ${{ inputs.dry-run }}
